<% nodes.each do |node| %>
  <%# Single answer set %>
  <% if node.set %>

    <%= render("responses/answers/set", set: node.set, inst_num: inst_num, read_only: read_only) %>

  <%# Group with one or more instances %>
  <% else %>

    <div class="qing-group" data-group-id="<%= node.item.id %>" data-inst-count="<%= node.instances.size %>">
      <div class="qing-group-instances">
        <% node.instances.each do |instance| %>
          <%= render("responses/answers/instance", node: node, instance: instance) %>
        <% end %>
      </div>
      <% if node.repeatable? && !read_only %>
        <a href="#" class="add-instance">
          <i class="fa fa-plus"></i> <%= node.item.group_name %>
        </a>
      <% end %>
    </div>

    <% if node.repeatable? && !read_only %>
      <%= javascript_doc_ready do %>
        new ELMO.Views.RepeatGroupFormView({
          el: <%=json ".qing-group[data-group-id=#{node.item.id}]" %>,
          tmpl: <%=json render("responses/answers/instance",
            node: node, instance: node.placeholder_instance) %>
        })
      <% end %>
    <% end %>

    <%# Setup condition js. %>
    <%# Note that we need to do this in any form mode, even show. %>
    <% if @condition_computer.present? %>
      <% response_condition_group = @condition_computer.condition_group_for(node.item) %>
      <% unless response_condition_group.empty? %>
        <%= javascript_doc_ready do %>
          new ELMO.Views.ResponseConditionManager(<%=json(
            el: 'form.response_form',
            item: ResponseCondition::FormItemSerializer.new(node.item, response_condition_group: response_condition_group),
            # Instance descriptor is the set of groups and instance numbers that are the parents of this group.
            # See _set.html.erb for a usage example
            inst: [] # Until there are nested groups, a group must be a child of the root group.
          ) %>);
        <% end %>
      <% end %>
    <% end %>
  <% end %>
<% end %>
