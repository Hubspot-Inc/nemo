<div class="answer-group" data-group-id="<%= group.id %>">
  <h2>
    <%= group.questioning.full_dotted_rank %>.
    <%= group.questioning.group_name %>
    <% if group.parent.is_a?(AnswerSet) && !read_only %>
      <a href="#" class="remove-instance"><i class="fa fa-close"></i></a>
    <% end %>
    <%= hint_popover(group.questioning.group_hint) %>
  </h2>

  <%= render("hierarchical_responses/answers/nodes", nodes: group.children) %>

  <% if false && node.repeatable? && !read_only %>
    <a href="#" class="add-instance">
      <i class="fa fa-plus"></i> <%= node.group_name %>
    </a>
  <% end %>

  <% if false && node.repeatable? && !read_only %>
    <%= javascript_doc_ready do %>
      new ELMO.Views.RepeatGroupFormView({
        el: <%=json ".qing-group[data-group-id=#{node.item.id}]" %>,
        tmpl: <%=json render("hierarchical_responses/answers/instance",
          node: node, instance: node.placeholder_instance) %>
      })
    <% end %>
  <% end %>

  <%# Setup condition js. %>
  <%# Note that we need to do this in any form mode, even show. %>
  <% if false && @condition_computer.present? %>
    <% response_condition_group = @condition_computer.condition_group_for(node.item) %>
    <% unless response_condition_group.empty? %>
      <%= javascript_doc_ready do %>
        new ELMO.Views.ResponseConditionManager(<%=json(
          el: 'form.response_form',
          item: ResponseCondition::FormItemSerializer.new(node.item,
            response_condition_group: response_condition_group),
          # Instance descriptor is the set of groups and inst_nums that are the parents of this group.
          # See _set.html.erb for a usage example
          inst: [] # Until there are nested groups, a group must be a child of the root group.
        ) %>);
      <% end %>
    <% end %>
  <% end %>
</div>
