<% index_placeholder = local_assigns[:index_placeholder] %>
<% removable = local_assigns[:removable] %>

<% nodes.each_with_index do |node, index| %>
  <% new_context = node.parent.present? ? context.add(index_placeholder ? "__INDEX__" : index) : context %>
  <% node_id = "node-#{rand(99999999)}" %>

  <div
    class="node"
    id="<%= node_id %>"
    data-qing-id="<%= node.form_item.id %>"
    data-qtype-name="<%= node.form_item.qtype_name %>">

    <% if node.is_a?(AnswerSet) %>
      <%= render("hierarchical_responses/answers/answer_set", set: node, context: new_context) %>
    <% elsif node.is_a?(AnswerGroup) %>
      <%= render("hierarchical_responses/answers/group", group: node, context: new_context) %>

      <% if removable %>
        <a href="#" class="remove-repeat">Remove</a>
      <% end %>
    <% elsif node.is_a?(Answer) %>
      <%= render("hierarchical_responses/answers/answer", answer: node, context: new_context) %>
    <% elsif node.is_a?(AnswerGroupSet) %>
      <%= render("hierarchical_responses/answers/group_set", group_set: node, context: new_context) %>
    <% end %>
  </div>

  <%# Setup condition js. %>
  <%# Note that we need to do this in any form mode, even show. %>
  <% if @condition_computer.present? %>
    <% response_condition_group = @condition_computer.condition_group_for(node.form_item) %>
    <% unless response_condition_group.empty? %>
      <%= javascript_doc_ready do %>
        new ELMO.Views.ResponseConditionManager(<%=json(
          el: "##{node_id}",
          item: ResponseCondition::FormItemSerializer.new(node.form_item,
            response_condition_group: response_condition_group),
          # Instance descriptor is the set of groups and inst_nums that are the parents of this group.
          # See _set.html.erb for a usage example
          inst: [] # Until there are nested groups, a group must be a child of the root group.
        ) %>);
      <% end %>
    <% end %>
  <% end %>
<% end %>
