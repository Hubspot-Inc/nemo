<% index_placeholder = local_assigns[:index_placeholder] %>
<% removable = local_assigns[:removable] %>

<% nodes.each_with_index do |node, index| %>
  <% node = Results::ResponseNodeDecorator.decorate(node, context) %>
  <% path_element = index_placeholder ? "__INDEX__" : index %>
  <% new_context = context.add(path_element, visible: !node.object.is_a?(AnswerGroupSet)) %>

  <div
    class="node"
    data-qing-id="<%= node.form_item.id %>"
    data-qtype-name="<%= node.form_item.qtype_name %>"
    data-visible-depth="<%= new_context.visible_depth %>"
    data-path="<%= new_context.path_str %>">

    <% if node.is_a?(AnswerSet) %>
      <%= render("hierarchical_responses/answers/answer_set", set: node, context: new_context) %>
    <% elsif node.is_a?(AnswerGroup) %>
      <%= render("hierarchical_responses/answers/group", group: node, context: new_context,
                                                         removable: removable) %>
    <% elsif node.is_a?(Answer) %>
      <%= render("hierarchical_responses/answers/answer", answer: node, context: new_context) %>
    <% elsif node.is_a?(AnswerGroupSet) %>
      <%= render("hierarchical_responses/answers/group_set", group_set: node, context: new_context) %>
    <% end %>
  </div>

  <%# Setup conditional logic %>
  <% if @condition_computer.present? %>
    <% response_condition_group = @condition_computer.condition_group_for(node.form_item) %>
    <% unless response_condition_group.empty? %>
      <%= javascript_doc_ready do %>
        new ELMO.Views.HierarchicalResponseConditionManager(<%=json(
          el: "[data-path='#{new_context.path_str}']",
          item: ResponseCondition::FormItemSerializer.new(
            node.form_item,
            response_condition_group: response_condition_group),
        ) %>);
      <% end %>
    <% end %>
  <% end %>
<% end %>
